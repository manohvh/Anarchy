<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NExtension</name>
    </assembly>
    <members>
        <member name="T:DotNetTools.NExtension.AccessKeyBundle">
            <summary>
            Stores and manages a bundle of <see cref="T:DotNetTools.NExtension.IAccessKey"/> objects. Methods of this class are thread-safe.
            </summary>
        </member>
        <member name="P:DotNetTools.NExtension.AccessKeyBundle.Keys">
            <summary>
            All keys registered in this bundle
            </summary>
        </member>
        <member name="P:DotNetTools.NExtension.AccessKeyBundle.ReadOnly">
            <summary>
            Whether or not this bundle is read-only.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.AccessKeyBundle.Contains(DotNetTools.NExtension.IAccessKey)">
            <summary>
            Checks if the specified <see cref="T:DotNetTools.NExtension.IAccessKey"/> exists in the bundle.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.AccessKeyBundle.ContainsAll(System.Collections.Generic.IEnumerable{DotNetTools.NExtension.IAccessKey})">
            <summary>
            Checks if all the specified <see cref="T:DotNetTools.NExtension.IAccessKey"/> objects exist in the bundle.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.AccessKeyBundle.Add(DotNetTools.NExtension.IAccessKey)">
            <summary>
            Adds the specified key to the bundle.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:DotNetTools.NExtension.AccessKeyBundle.Remove(DotNetTools.NExtension.IAccessKey)">
            <summary>
            Removes the specified key from the bundle if exists.
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.GuidAccessKey">
            <summary>
            Implements <see cref="T:DotNetTools.NExtension.IAccessKey"/> providing access key objects identified by GUID.
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.IAccessKey">
            <summary>
            Represents an access key which is required for calling some methods.
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.IAccessKeyContainer">
            <summary>
            Represents an object that might contain one or more <see cref="T:DotNetTools.NExtension.IAccessKey"/> objects.
            </summary>
        </member>
        <member name="P:DotNetTools.NExtension.IAccessKeyContainer.Keys">
            <summary>
            All keys in the container
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.IProtectable">
            <summary>
            Represents any object that can be protected with one or more access keys.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.IProtectable.Protect(DotNetTools.NExtension.IAccessKey[])">
            <summary>
            Protect this object with one or more access keys.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.IProtectable.ClearProtection(DotNetTools.NExtension.IAccessKeyContainer)">
            <summary>
            Clears protection of this object only if the specified <paramref name="accessKeys"/> contains all of the
            access keys this object is protected by.
            </summary>
            <exception cref="T:DotNetTools.NExtension.AccessException">If this object is already unprotected.</exception>
            <exception cref="T:DotNetTools.NExtension.InvalidAccessKeyException">If the specified access keys are insufficient or invalid.</exception>
        </member>
        <member name="T:DotNetTools.NExtension.SimpleAccessKey">
            <summary>
            Implements <see cref="T:DotNetTools.NExtension.IAccessKey"/> without storing any data. This access key can only be identified by its reference in memory.
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.BaseReadOnlyFeatureContainer">
            <summary>
            Implements methods of the <see cref="T:DotNetTools.NExtension.IReadOnlyFeatureContainer"/> in a way that they share an abstract method.
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.BlackHoleCollector`1">
            <summary>
            Variation of <see cref="T:DotNetTools.NExtension.ICollector"/> that does not store or retrieve anything but pretends to do.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.BlackHoleCollector`1.All">
            <summary>
            Creates and returns an array of all collected objects.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DotNetTools.NExtension.BlackHoleCollector">
            <summary>
            Variation of <see cref="T:DotNetTools.NExtension.ICollector"/> that does not store or retrieve any disposables but pretends to do.
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.CallbackDisposable">
            <summary>
            A disposable object that will call a certain callback method when disposed.
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.Collector`1">
            <summary>
            Basic implementation of <see cref="T:DotNetTools.NExtension.ICollector"/> that can store and retrieve objects of the specified type.
            Methods of this class are NOT thread-safe.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.Collector`1.All">
            <summary>
            Creates and returns an array of all collected objects.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DotNetTools.NExtension.Collector">
            <summary>
            Basic implementation of <see cref="T:DotNetTools.NExtension.ICollector"/> that can store and retrieve disposable objects.
            Methods of this class are NOT thread-safe.
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.AccessException">
            <summary>
            Thrown when a requested operation or resource is inaccessible for any possible reason.
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.ImplementationException">
            <summary>
            This exception is thrown when there is a problem with implementation.
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.InvalidAccessKeyException">
            <summary>
            Thrown when a required access key is not specified or is invalid.
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.IrresponsibilityException">
            <summary>
            An exception that is thrown when a <see cref="!:ResponsibilityChain"/> fails to handle an invocation.  
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.NExtensionException">
            <summary>
            Base exception for all exceptions related to NExtension.
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.NotRemovableException">
            <summary>
            Indicates that the extension is not removable and cannot be disabled on runtime.
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.ReadOnlyException">
            <summary>
            Indicates that the entity to change is read-only and thus the operation has failed.
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.ExtensionMetadataAttribute">
            <summary>
            Provides information about the extension class.
            </summary>
        </member>
        <member name="P:DotNetTools.NExtension.ExtensionMetadataAttribute.Guid">
            <summary>
            Global Unique Identifier (GUID) for the extension type
            </summary>
        </member>
        <member name="P:DotNetTools.NExtension.ExtensionMetadataAttribute.DisplayName">
            <summary>
            Display name of the extension
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.Extension.BaseExtension">
            <summary>
            Default and simple implementation for <see cref="T:DotNetTools.NExtension.Extension.IExtension"/>.
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.Extension.IExtension">
            <summary>
            Implemented by the extensions to provide extension functionality such as registration management.
            </summary>
        </member>
        <member name="P:DotNetTools.NExtension.Extension.IExtension.RuntimeRemovable">
            <summary>
            Whether or not this extension can be safely removed from the host it's registered on without restarting. 
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.Extension.IExtension.Register(DotNetTools.NExtension.RegistrationContext)">
            <summary>
            Gets invoked by the host when being registered. The extension should state every manipulation
            or change it does, through the registration context.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.Extension.IExtension.Unregister(DotNetTools.NExtension.Host.IRegisteredExtension)">
            <summary>
            Gets invoked by the host when being unregistered in case the extension needs to do finalization.
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.FeatureContainer">
            <summary>
            Overrides <see cref="T:DotNetTools.NExtension.BaseReadOnlyFeatureContainer"/> and implements <see cref="M:DotNetTools.NExtension.BaseReadOnlyFeatureContainer.Get(System.Object)"/>
            using internal dictionary. Methods of this class are thread-safe.
            </summary>
        </member>
        <member name="P:DotNetTools.NExtension.FeatureContainer.IsSealed">
            <summary>
            Whether or not this container is sealed
            </summary>
        </member>
        <member name="P:DotNetTools.NExtension.FeatureContainer.IsProtected">
            <summary>
            Whether or not this container is protected
            </summary>
        </member>
        <member name="P:DotNetTools.NExtension.FeatureContainer.IsEmpty">
            <summary>
            Whether or not this container is empty
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.FeatureContainer.Delete(System.Object[])">
            <summary>
            Deletes the specified key chain. This method throws exceptions on failure all the time except for when a key
            in the chain is missing in which case false is returned. If the target key refers to a feature container,
            it is removed only if it is empty; otherwise false is returned.
            </summary>
            <returns>True if the target key was removed, false if it was missing.</returns>
        </member>
        <member name="M:DotNetTools.NExtension.FeatureContainer.Seal">
            <summary>
            Seals this object so that it will become unmodifiable.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.FeatureContainer.SealRecursively">
            <summary>
            Seals this container and all of its descendant containers. This method will not throw any exceptions if any of the containers is already sealed.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.FeatureContainer.CloneReadOnly">
            <summary>
            Makes a read-only copy of this object.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.FeatureContainer.CloneWritable">
            <summary>
            Clones this object to another <see cref="T:DotNetTools.NExtension.FeatureContainer"/> instance. The returned container will not be sealed even if current object is.
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.FeatureContainerUpdateContext">
            <summary>
            An instance of this class gets created when a user is trying to manipulate an <see cref="T:DotNetTools.NExtension.IFeatureContainer"/>.
            Set methods of this object do not apply changes immediately, but rather get buffered and then applied when the
            instance is disposed.
            <para>Notice that methods of this class are NOT thread-safe and are intended to be invoked by one single thread.</para> 
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.Host.ExtensionHost">
            <summary>
            Default implementation for <see cref="T:DotNetTools.NExtension.Host.IExtensionHost"/> - Implements a host for the extensions
            <para>Methods of this class are thread-safe.</para>
            </summary>
        </member>
        <member name="E:DotNetTools.NExtension.Host.ExtensionHost.ExtensionRegistered">
            <summary>
            Gets invoked when an extension is registered.
            </summary>
        </member>
        <member name="E:DotNetTools.NExtension.Host.ExtensionHost.ExtensionUnregistered">
            <summary>
            Gets invoked when a registered extension is unregistered.
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.Host.IExtensionHost">
            <summary>
            Describes main functionality of the host for the extensions.
            </summary>
        </member>
        <member name="P:DotNetTools.NExtension.Host.IExtensionHost.Root">
            <summary>
            Root container for features that are registered on this extension host.
            </summary>
        </member>
        <member name="P:DotNetTools.NExtension.Host.IExtensionHost.Parameter">
            <summary>
            Optional reference to the object that wraps host features. This reference will be available in
            <see cref="T:DotNetTools.NExtension.RegistrationContext"/> objects that are passed to extensions while they are being
            installed.
            </summary>
        </member>
        <member name="P:DotNetTools.NExtension.Host.IExtensionHost.RegisteredExtensions">
            <summary>
            Returns an array of currently registered extensions.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.Host.IExtensionHost.RegisterExtension(DotNetTools.NExtension.Extension.IExtension)">
            <summary>
            Registers an extension.
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.Host.IRegisteredExtension">
            <summary>
            Represents an extension registered on a host.
            </summary>
        </member>
        <member name="E:DotNetTools.NExtension.Host.IRegisteredExtension.Unregistered">
            <summary>
            Invoked when this registered extension gets unregistered.
            </summary>
        </member>
        <member name="P:DotNetTools.NExtension.Host.IRegisteredExtension.Extension">
            <summary>
            Metadata of the extension that is registered
            </summary>
        </member>
        <member name="P:DotNetTools.NExtension.Host.IRegisteredExtension.Host">
            <summary>
            Host on which this <see cref="T:DotNetTools.NExtension.Host.IRegisteredExtension"/> is registered 
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.Host.IRegisteredExtension.Unregister">
            <summary>
            Unregisters the extension from the host by rolling back the applied changes.
            This method does the same thing that <see cref="M:System.IDisposable.Dispose"/> does.
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.Host.RegisteredExtension">
            <summary>
            Default implementation for an extension registered on a host. Methods of this class are thread-safe.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.Host.RegisteredExtension.Collect(System.IDisposable)">
            <summary>
            Adds a disposable object to the list of objects that need to be disposed after this object gets disposed. 
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.Host.RegisteredExtension.Collect(System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>
            Adds a bunch of disposable objects to the list of objects that need to be disposed after this object gets disposed. 
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.ICollector`1">
            <summary>
            Represents an object that is able to collect one or more objects of the specified type.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.ICollector`1.Collect(`0)">
            <summary>
            Collects the specified object.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.ICollector`1.Collect(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Collects the given collection of objects.
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.ICollector">
            <summary>
            Represents an object that is able to collect one or more <see cref="T:System.IDisposable"/> objects.
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.IFeatureContainer">
            <summary>
            Represents any object that contains features, that is, events, objects, listeners, values etc.
            This interface provides both read and write capabilities. See <see cref="T:DotNetTools.NExtension.IReadOnlyFeatureContainer"/> for the
            read-only version. 
            </summary>
            <remarks>
            This interface includes not only all of <see cref="T:DotNetTools.NExtension.IReadOnlyFeatureContainer"/> capabilities; but also
            manipulation capabilities which is provided through the method <see cref="M:DotNetTools.NExtension.IFeatureContainer.Update(DotNetTools.NExtension.ICollector,DotNetTools.NExtension.IAccessKeyContainer)"/>.
            </remarks>
            <seealso cref="T:DotNetTools.NExtension.IReadOnlyFeatureContainer"/>
        </member>
        <member name="P:DotNetTools.NExtension.IFeatureContainer.IsSealed">
            <summary>
            Whether or not this feature container is sealed. When sealed, it cannot be modified.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.IFeatureContainer.Update(DotNetTools.NExtension.ICollector,DotNetTools.NExtension.IAccessKeyContainer)">
            <summary>
            Begins an update transaction on this container.
            </summary>
            <remarks>
            Make sure to dispose the returned <see cref="T:DotNetTools.NExtension.IFeatureContainerUpdateContext"/> after applying changes.
            If the <see cref="T:DotNetTools.NExtension.IFeatureContainer"/> is sealed, this method will throw a <see cref="T:DotNetTools.NExtension.ReadOnlyException"/>.
            </remarks>
        </member>
        <member name="M:DotNetTools.NExtension.IFeatureContainer.Update(DotNetTools.NExtension.ICollector,System.Action{DotNetTools.NExtension.IFeatureContainerUpdateContext},DotNetTools.NExtension.IAccessKeyContainer)">
            <summary>
            Begins an update transaction on this container, invokes <paramref name="callback"/> and then commits the transaction.
            </summary>
            <remarks>
            If the <see cref="T:DotNetTools.NExtension.IFeatureContainer"/> is sealed, this method will throw a <see cref="T:DotNetTools.NExtension.ReadOnlyException"/>.
            </remarks>
        </member>
        <member name="T:DotNetTools.NExtension.IFeatureContainerUpdateContext">
            <summary>
            An instance of <see cref="T:DotNetTools.NExtension.IFeatureContainerUpdateContext"/> is created to edit an <see cref="T:DotNetTools.NExtension.IFeatureContainer"/>. All of the requested changes on the
            <see cref="T:DotNetTools.NExtension.IFeatureContainerUpdateContext"/> are staged and will apply to the container after disposal.
            </summary>
        </member>
        <member name="P:DotNetTools.NExtension.IFeatureContainerUpdateContext.Item(System.Object)">
            <summary>
            Sets the value associated with the specified key in this very container.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.IFeatureContainerUpdateContext.Set(System.Object[],System.Object,System.Boolean)">
            <summary>
            Updates value for the specified key chain. Creates containers where missing if desired.
            </summary>
            <returns>This object for cascading.</returns>
            <remarks>This method does not change sealed values, even when current container is not.</remarks>
        </member>
        <member name="M:DotNetTools.NExtension.IFeatureContainerUpdateContext.Set(System.String,System.Object,System.Boolean)">
            <summary>
            Updates value for the specified path. Creates containers where missing if desired.
            </summary>
            <returns>This object for cascading.</returns>
            <remarks>This method does not change sealed values, even when current container is not.</remarks>
        </member>
        <member name="T:DotNetTools.NExtension.Internal.AutoDictionary`2">
            <summary>
            Similar to <see cref="T:System.Collections.Generic.Dictionary`2"/>, with only few differences. Index getter/setter methods do not
            throw key-related exceptions. For example, if the key doesn't exist, default value of <typeparamref name="TKey"/> is returned.
            </summary>
            <typeparam name="TKey">Type of keys</typeparam>
            <typeparam name="TValue">Type of values</typeparam>
        </member>
        <member name="T:DotNetTools.NExtension.Internal.FeatureContainerUpdateSetRecord">
            <summary>
            Represents a value set request on a feature container. 
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.Internal.ProtectableTrait">
            <summary>
            Simply implements <see cref="T:DotNetTools.NExtension.IProtectable"/> in a thread-safe manner for usage in other classes.
            </summary>
        </member>
        <member name="P:DotNetTools.NExtension.Internal.ProtectableTrait.ProtectOnce">
            <summary>
            Whether or not this object will accept protection only once. If true, <see cref="M:DotNetTools.NExtension.Internal.ProtectableTrait.Protect(DotNetTools.NExtension.IAccessKey[])"/> will throw an
            exception if someone tries to call it twice.
            </summary>
        </member>
        <member name="P:DotNetTools.NExtension.Internal.ProtectableTrait.IsProtected">
            <summary>
            Whether or not this object is protected with at least one access key
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.Internal.ProtectableTrait.Check(DotNetTools.NExtension.IAccessKeyContainer)">
            <summary>
            Checks if the specified container contains all of the required keys.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.Internal.ProtectableTrait.CheckAndThrow(DotNetTools.NExtension.IAccessKeyContainer)">
            <summary>
            Checks if the specified container contains all of the required keys and throws if it doesn't'.
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.Internal.SequenceGenerator">
            <summary>
            Utility class that generates numbers in order starting from the specified number.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.Internal.SequenceGenerator.Next">
            <summary>
            Generates the next number in the sequence.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.Internal.SequenceGenerator.ForLong(System.Int64)">
            <summary>
            Create a sequence generator for long values.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.Internal.SequenceGenerator.ForInteger(System.Int32)">
            <summary>
            Create a sequence generator for integer values.
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.IReadOnlyFeatureContainer">
            <summary>
            Represents any object that contains features, that is, events, objects, listeners, values etc.
            This interface provides read-only capabilities. A read-only container might also be writable; check if the
            instance also implements <see cref="T:DotNetTools.NExtension.IFeatureContainer"/> and is not sealed.
            </summary>
            <seealso cref="T:DotNetTools.NExtension.IFeatureContainer"/>
        </member>
        <member name="P:DotNetTools.NExtension.IReadOnlyFeatureContainer.IsEmpty">
            <summary>
            Whether or not the feature container is empty.
            </summary>
        </member>
        <member name="P:DotNetTools.NExtension.IReadOnlyFeatureContainer.Item(System.Object)">
            <summary>
            Tries to fetch the value associated with the specified key in this very container. Returns null if not
            exists.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.IReadOnlyFeatureContainer.Value(System.Object[])">
            <summary>
            Tries to traverse the containers using the specified key chain and fetch the final value. Returns null if it
            fails to find a container or the desired key is not found.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.IReadOnlyFeatureContainer.Value``1(System.Object[])">
            <summary>
            Tries to traverse the containers using the specified key chain and fetch the final value of the given type.
            Returns null if it fails to find a container or the desired key is not found.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.IReadOnlyFeatureContainer.ValueByPath(System.String)">
            <summary>
            Fetches the value associated with the specified path; assuming that the path is a dot (.) delimited string
            containing a list of string-typed keys. 
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.IReadOnlyFeatureContainer.ValueByPath``1(System.String)">
            <summary>
            Fetches the value associated with the specified path; assuming that the path is a dot (.) delimited string
            containing a list of string-typed keys. 
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.IReadOnlyFeatureContainer.Container(System.Object[])">
            <summary>
            Tries to fetch the <see cref="T:DotNetTools.NExtension.IReadOnlyFeatureContainer"/> targeted by the specified keys.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.IReadOnlyFeatureContainer.ContainerByPath(System.String)">
            <summary>
            Tries to fetch the <see cref="T:DotNetTools.NExtension.IReadOnlyFeatureContainer"/> targeted by the specified keys.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.IReadOnlyFeatureContainer.Contains(System.Object[])">
            <summary>
            Returns whether or not a value for the specified key chain is available.  
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.IReadOnlyFeatureContainer.ContainsPath(System.String)">
            <summary>
            Returns whether or not a value for the specified path is available.  
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.Linking.ExtensionLoader">
            <summary>
            Provides methods to load extensions from various sources.
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.Priority">
            <summary>
            Defines constants related to priority values.
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.ReadOnlyFeatureContainer">
            <summary>
            Overrides <see cref="T:DotNetTools.NExtension.BaseReadOnlyFeatureContainer"/> and implements <see cref="M:DotNetTools.NExtension.BaseReadOnlyFeatureContainer.Get(System.Object)"/> using
            internal dictionary. Methods of this class are thread-safe.
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.RegistrationContext">
            <summary>
            Passed to extensions as they are being registered within the host. An instance of this class is stored for each registered
            extension to provide registration-time functionality for the extensions.
            Notice that this class is NOT thread-safe.
            </summary>
        </member>
        <member name="P:DotNetTools.NExtension.RegistrationContext.Disposables">
            <summary>
            Returns a hash set of all of registered objects. If you want to perform any operation on this hash set
            simultaneously, make sure to handle synchronization risks as methods of this class are not thread-safe.
            </summary>
        </member>
        <member name="P:DotNetTools.NExtension.RegistrationContext.HostParameter">
            <summary>
            A parameter optionally assigned by the extension host - It may be anything but it is recommended for the
            hosts to set their API interface reference here.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.RegistrationContext.Parameter``1">
            <summary>
            Returns the <see cref="P:DotNetTools.NExtension.RegistrationContext.HostParameter"/> with the specified class, or null if invalid or missing.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.RegistrationContext.Register(System.IDisposable)">
            <summary>
            Registers an <see cref="T:System.IDisposable"/> object which will be disposed when the extension is disabled or uninstalled.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.RegistrationContext.Register(System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>
            Registers many <see cref="T:System.IDisposable"/> objects that will be disposed when the extension is disabled or uninstalled.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.RegistrationContext.Collect``1(``0)">
            <summary>
            Adds the specified disposable object to the disposables list and returns the given object itself.
            </summary>
            <returns>Input disposable for cascading</returns>
        </member>
        <member name="T:DotNetTools.NExtension.Structures.AsyncDelegateFactory`1">
            <summary>
            Implements <see cref="T:DotNetTools.NExtension.Structures.IAsyncFactory`1"/> with a callback function.
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.Structures.DelegateFactory`1">
            <summary>
            Implements <see cref="T:DotNetTools.NExtension.Structures.IFactory`1"/> with a callback function.
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.Structures.Event`1">
            <summary>
            Event that may be subscribed to by anyone and invoked by anyone. Invocation may be protected by the creator. 
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.Structures.Event`1.Subscribe(`0,DotNetTools.NExtension.ICollector)">
            <summary>
            Subscribes the given handler to the event.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.Structures.Event`1.Unsubscribe(`0)">
            <summary>
            Unsubscribe the given handler from the event.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.Structures.Event`1.DirectInvoke(System.Object[])">
            <summary>
            Invokes all subscribed methods with the optionally provided arguments - if not protected.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.Structures.Event`1.Invoke(DotNetTools.NExtension.IAccessKeyContainer,System.Object[])">
            <summary>
            Invokes all subscribed methods with the optionally provided arguments. This method works in both protected
            and unprotected modes.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.Structures.Event`1.Walk(DotNetTools.NExtension.IAccessKeyContainer,System.Object[],System.Func{System.Object,System.Boolean})">
            <summary>
            Invokes all subscribed methods with the provided arguments, and invokes <paramref name="callback"/> after
            each invocation supplying returning value as its argument.
            <para>
            If the callback returns true, the same object
            passed as the callback argument will be the result of the entire call and the remaining subscriber methods
            are ignored; otherwise the flow will move on to the next subscriber.
            </para> 
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.Structures.Event`1.Protect(DotNetTools.NExtension.IAccessKey[])">
            <summary>
            Protects invocation of this event with an access key.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.Structures.Event`1.ClearProtection(DotNetTools.NExtension.IAccessKeyContainer)">
            <summary>
            Clear protection from invocation of this event.
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.Structures.IAsyncFactory`1">
            <summary>
            Asynchronous factory for <typeparamref name="T"/> - Creates objects of the specified type asynchronously.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.Structures.IAsyncFactory`1.CreateAsync(System.Object[])">
            <summary>
            Creates a new instance of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.Structures.IFactory`1">
            <summary>
            Factory for <typeparamref name="T"/> - Creates objects of the specified type.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.Structures.IFactory`1.Create(System.Object[])">
            <summary>
            Creates a new instance of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.Structures.Implementable`1">
            <summary>
            Describes a need of implementation for the specified <typeparamref name="TInterface"/> and allows the
            implementer to register its handler.
            <para>Methods of this class are thread-safe.</para>
            </summary>
        </member>
        <member name="P:DotNetTools.NExtension.Structures.Implementable`1.AllowImplementationUpdate">
            <summary>
            Whether or not the implementation may be updated more than once.
            </summary>
        </member>
        <member name="P:DotNetTools.NExtension.Structures.Implementable`1.IsImplemented">
            <summary>
            Whether or not an implementation is available for this object.
            </summary>
        </member>
        <member name="P:DotNetTools.NExtension.Structures.Implementable`1.Implementation">
            <summary>
            Get implementation instance
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.Structures.Implementable`1.Implement(`0,DotNetTools.NExtension.ICollector)">
            <summary>
            Registers the specified implementation for <typeparamref name="TInterface"/> on this object.
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.Structures.ResponsibilityChainDelegate`2">
            <summary>
            Delegate definition for a responsibility chain handler
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.Structures.ResponsibilityChain`2">
            <summary>
            Hosts handlers for a method. These handlers have priorities and may be able to terminate the chain.
            <para>Methods of this class are thread-safe.</para>
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.Structures.ResponsibilityChain`2.HandlerUnregisterer">
            <summary>
            Created to undo certain handle registration when disposed.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.Structures.ResponsibilityChain`2.GetHandlersStack">
            <summary>
            Converts registered handlers to a stack based on their priorities.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.Structures.ResponsibilityChain`2.Register(DotNetTools.NExtension.Structures.ResponsibilityChainDelegate{`0,`1},DotNetTools.NExtension.ICollector,System.Double,DotNetTools.NExtension.IAccessKeyContainer)">
            <summary>
            Inserts the specified handler to the chain.
            <para>Throws <see cref="T:DotNetTools.NExtension.AccessException"/> if protected and no access keys are specified.</para>
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.Structures.ResponsibilityChain`2.Collect(`0,DotNetTools.NExtension.IAccessKeyContainer)">
            <summary>
            Invokes handlers in the chain considering their priorities and collect all of the results returned by handlers.
            The returned array will sort by highest priority and oldest registered handlers to lowest and latest ones.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.Structures.ResponsibilityChain`2.Invoke(`0,DotNetTools.NExtension.IAccessKeyContainer)">
            <summary>
            Invokes handlers in the chain considering their priorities and returns the most recent result returned by the handlers.
            <para>Throws <see cref="T:DotNetTools.NExtension.IrresponsibilityException"/> if no handler was able to handle this call.</para>
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.Structures.ResponsibilityChain`2.InvokeOrDefault(`0,DotNetTools.NExtension.IAccessKeyContainer,`1)">
            <summary>
            Invokes handlers in the chain considering their priorities and returns the most recent result returned by the handlers.
            <para>Returns default value if no handler was able to handle this call.</para>
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.Structures.ResponsibilityChain`2.ProtectRegistration(DotNetTools.NExtension.IAccessKey[])">
            <summary>
            Protects method registration on this object from callers who don't possess necessary access keys.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.Structures.ResponsibilityChain`2.ProtectInvocation(DotNetTools.NExtension.IAccessKey[])">
            <summary>
            Protects method invocation on this object from callers who don't possess necessary access keys.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.Structures.ResponsibilityChain`2.ClearRegistrationProtection(DotNetTools.NExtension.IAccessKeyContainer)">
            <summary>
            Clears protection from the registration method.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.Structures.ResponsibilityChain`2.ClearInvocationProtection(DotNetTools.NExtension.IAccessKeyContainer)">
            <summary>
            Clears protection from the invocation method.
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.Structures.ResponsibilityChainContext`2">
            <summary>
            Controls the flow of an executing responsibility chain.
            </summary>
        </member>
        <member name="P:DotNetTools.NExtension.Structures.ResponsibilityChainContext`2.IsTerminated">
            <summary>
            Whether or not the context of the chain calls is signaled as terminated
            </summary>
        </member>
        <member name="P:DotNetTools.NExtension.Structures.ResponsibilityChainContext`2.RemainingChain">
            <summary>
            Returns an array consisting of all remaining handlers.
            </summary>
        </member>
        <member name="P:DotNetTools.NExtension.Structures.ResponsibilityChainContext`2.AnyResults">
            <summary>
            Returns true if there are any results returned by the handlers, otherwise false.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.Structures.ResponsibilityChainContext`2.Terminate">
            <summary>
            Prevents the rest of the chain from execution and returns no result.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.Structures.ResponsibilityChainContext`2.Terminate(`1)">
            <summary>
            Provides a result and prevents the rest of the chain from execution.
            </summary>
            <param name="output"></param>
        </member>
        <member name="M:DotNetTools.NExtension.Structures.ResponsibilityChainContext`2.Return(`1)">
            <summary>
            Pushes the specified result to the result stack.
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.Structures.ResponsibilityChainContext`2.PopResult">
            <summary>
            Pops the last returned result from the result stack.
            <para>Throws <see cref="T:DotNetTools.NExtension.NotFoundException"/> if no results were found to return.</para>
            </summary>
        </member>
        <member name="M:DotNetTools.NExtension.Structures.ResponsibilityChainContext`2.GetResults">
            <summary>
            Returns all results in the stack as an array.
            </summary>
        </member>
        <member name="T:DotNetTools.NExtension.Structures.TypeFactory`2">
            <summary>
            Implements <see cref="T:DotNetTools.NExtension.Structures.IFactory`1"/> by simply creating instances of <typeparamref name="TCreateType"/>
            - which is derived from <typeparamref name="TFactoryType"/>.
            </summary>
        </member>
    </members>
</doc>
